(function() {
    var type_impls = Object.fromEntries([["rs_tfhe",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FFTProcessor-for-KlemsaProcessor\" class=\"impl\"><a class=\"src rightside\" href=\"src/rs_tfhe/fft/klemsa.rs.html#83-175\">Source</a><a href=\"#impl-FFTProcessor-for-KlemsaProcessor\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"rs_tfhe/fft/trait.FFTProcessor.html\" title=\"trait rs_tfhe::fft::FFTProcessor\">FFTProcessor</a> for <a class=\"struct\" href=\"rs_tfhe/fft/klemsa/struct.KlemsaProcessor.html\" title=\"struct rs_tfhe::fft::klemsa::KlemsaProcessor\">KlemsaProcessor</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/rs_tfhe/fft/klemsa.rs.html#84-86\">Source</a><a href=\"#method.new\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"rs_tfhe/fft/trait.FFTProcessor.html#tymethod.new\" class=\"fn\">new</a>(n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.usize.html\">usize</a>) -&gt; Self</h4></section></summary><div class='docblock'>Create a new FFT processor for polynomials of size n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ifft\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/rs_tfhe/fft/klemsa.rs.html#88-117\">Source</a><a href=\"#method.ifft\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"rs_tfhe/fft/trait.FFTProcessor.html#tymethod.ifft\" class=\"fn\">ifft</a>&lt;const N: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.usize.html\">usize</a>&gt;(&amp;mut self, input: &amp;[<a class=\"type\" href=\"rs_tfhe/params/type.Torus.html\" title=\"type rs_tfhe::params::Torus\">Torus</a>; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.array.html\">N</a>]) -&gt; [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.f64.html\">f64</a>; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.array.html\">N</a>]</h4></section></summary><div class='docblock'>Generic forward FFT for any power-of-2 size N\nInput: N torus32 values representing polynomial coefficients\nOutput: N f64 values (N/2 complex stored as [re_0..re_N/2-1, im_0..im_N/2-1])</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.fft\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/rs_tfhe/fft/klemsa.rs.html#119-150\">Source</a><a href=\"#method.fft\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"rs_tfhe/fft/trait.FFTProcessor.html#tymethod.fft\" class=\"fn\">fft</a>&lt;const N: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.usize.html\">usize</a>&gt;(&amp;mut self, input: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.f64.html\">f64</a>; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.array.html\">N</a>]) -&gt; [<a class=\"type\" href=\"rs_tfhe/params/type.Torus.html\" title=\"type rs_tfhe::params::Torus\">Torus</a>; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.array.html\">N</a>]</h4></section></summary><div class='docblock'>Generic inverse FFT for any power-of-2 size N\nInput: N f64 values (N/2 complex stored as [re_0..re_N/2-1, im_0..im_N/2-1])\nOutput: N torus32 values representing polynomial coefficients</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.poly_mul\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/rs_tfhe/fft/klemsa.rs.html#152-174\">Source</a><a href=\"#method.poly_mul\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"rs_tfhe/fft/trait.FFTProcessor.html#tymethod.poly_mul\" class=\"fn\">poly_mul</a>&lt;const N: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.usize.html\">usize</a>&gt;(\n    &amp;mut self,\n    a: &amp;[<a class=\"type\" href=\"rs_tfhe/params/type.Torus.html\" title=\"type rs_tfhe::params::Torus\">Torus</a>; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.array.html\">N</a>],\n    b: &amp;[<a class=\"type\" href=\"rs_tfhe/params/type.Torus.html\" title=\"type rs_tfhe::params::Torus\">Torus</a>; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.array.html\">N</a>],\n) -&gt; [<a class=\"type\" href=\"rs_tfhe/params/type.Torus.html\" title=\"type rs_tfhe::params::Torus\">Torus</a>; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.array.html\">N</a>]</h4></section></summary><div class='docblock'>Generic negacyclic polynomial multiplication for any power-of-2 size N\nComputes: a(X) * b(X) mod (X^N+1)</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.batch_ifft\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/rs_tfhe/fft/mod.rs.html#99-101\">Source</a><a href=\"#method.batch_ifft\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"rs_tfhe/fft/trait.FFTProcessor.html#method.batch_ifft\" class=\"fn\">batch_ifft</a>&lt;const N: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.usize.html\">usize</a>&gt;(&amp;mut self, inputs: &amp;[[<a class=\"type\" href=\"rs_tfhe/params/type.Torus.html\" title=\"type rs_tfhe::params::Torus\">Torus</a>; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.array.html\">N</a>]]) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.90.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.f64.html\">f64</a>; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.array.html\">N</a>]&gt;</h4></section></summary><div class='docblock'>Generic batch IFFT for any power-of-2 size N</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.batch_fft\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/rs_tfhe/fft/mod.rs.html#104-106\">Source</a><a href=\"#method.batch_fft\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"rs_tfhe/fft/trait.FFTProcessor.html#method.batch_fft\" class=\"fn\">batch_fft</a>&lt;const N: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.usize.html\">usize</a>&gt;(&amp;mut self, inputs: &amp;[[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.f64.html\">f64</a>; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.array.html\">N</a>]]) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.90.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;[<a class=\"type\" href=\"rs_tfhe/params/type.Torus.html\" title=\"type rs_tfhe::params::Torus\">Torus</a>; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.array.html\">N</a>]&gt;</h4></section></summary><div class='docblock'>Generic batch FFT for any power-of-2 size N</div></details></div></details>","FFTProcessor","rs_tfhe::fft::DefaultFFTProcessor"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-KlemsaProcessor\" class=\"impl\"><a class=\"src rightside\" href=\"src/rs_tfhe/fft/klemsa.rs.html#42-81\">Source</a><a href=\"#impl-KlemsaProcessor\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"struct\" href=\"rs_tfhe/fft/klemsa/struct.KlemsaProcessor.html\" title=\"struct rs_tfhe::fft::klemsa::KlemsaProcessor\">KlemsaProcessor</a></h3></section></summary><div class=\"impl-items\"><section id=\"method.new\" class=\"method\"><a class=\"src rightside\" href=\"src/rs_tfhe/fft/klemsa.rs.html#43-80\">Source</a><h4 class=\"code-header\">pub fn <a href=\"rs_tfhe/fft/klemsa/struct.KlemsaProcessor.html#tymethod.new\" class=\"fn\">new</a>(n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.usize.html\">usize</a>) -&gt; Self</h4></section></div></details>",0,"rs_tfhe::fft::DefaultFFTProcessor"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[8201]}