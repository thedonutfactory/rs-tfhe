name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust: [stable, beta, nightly]
        features: ["", "lut-bootstrap", "lut-bootstrap,fft_avx"]
        include:
          - rust: stable
            features: ""
            test_examples: true
          - rust: stable
            features: "lut-bootstrap"
            test_examples: true

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}
        components: rustfmt, clippy

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

    - name: Cache cargo index
      uses: actions/cache@v4
      with:
        path: ~/.cargo/git
        key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}

    - name: Cache cargo build
      uses: actions/cache@v4
      with:
        path: target
        key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}-${{ matrix.features }}

    - name: Check formatting
      if: matrix.rust == 'stable'
      run: cargo fmt --all -- --check

    - name: Run clippy
      if: matrix.rust == 'stable'
      run: cargo clippy --all-targets --all-features -- -D warnings

    - name: Build
      run: cargo build --verbose --features "${{ matrix.features }}"

    - name: Build (release)
      run: cargo build --release --verbose --features "${{ matrix.features }}"

    - name: Run tests
      run: cargo test --verbose --features "${{ matrix.features }}"

    - name: Run tests (release)
      run: cargo test --release --verbose --features "${{ matrix.features }}"

    - name: Run examples
      if: matrix.test_examples == true
      run: |
        cargo run --example add_two_numbers --release --features "${{ matrix.features }}"
        cargo run --example gates_with_strategies --release --features "${{ matrix.features }}"
        if [[ "${{ matrix.features }}" == *"lut-bootstrap"* ]]; then
          cargo run --example lut_bootstrapping --release --features "${{ matrix.features }}"
          cargo run --example lut_arithmetic_demo --release --features "${{ matrix.features }}"
        fi

  test-windows:
    name: Test (Windows)
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: stable

    - name: Build
      run: cargo build --verbose

    - name: Run tests
      run: cargo test --verbose

  test-macos:
    name: Test (macOS)
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: stable

    - name: Build
      run: cargo build --verbose

    - name: Run tests
      run: cargo test --verbose

  test-lut-features:
    name: Test LUT Features
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: stable

    - name: Test without LUT features
      run: |
        cargo test --verbose
        cargo run --example add_two_numbers --release

    - name: Test with LUT features
      run: |
        cargo test --verbose --features "lut-bootstrap"
        cargo run --example lut_bootstrapping --release --features "lut-bootstrap"
        cargo run --example lut_add_two_numbers --release --features "lut-bootstrap"
        cargo run --example lut_arithmetic_demo --release --features "lut-bootstrap"
        cargo run --example lut_uint_parameters_demo --release --features "lut-bootstrap"

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: stable

    - name: Install cargo-audit
      run: cargo install cargo-audit

    - name: Run security audit
      run: cargo audit

  docs:
    name: Documentation
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: stable

    - name: Build documentation
      run: cargo doc --no-deps --features "lut-bootstrap"

    - name: Deploy to GitHub Pages
      if: github.ref == 'refs/heads/main'
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./target/doc
